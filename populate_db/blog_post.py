from populate_db import app, kill_db, db, Post, datetime

with app.app_context():
	db.session.query(Post).delete()
	title = "De simples √©tudiants en BTS √† pionniers d'un march√© üöÄ"

	body = """

## Voici notre histoire :

D√®s la sortie de la premi√®re version de Chat GPT, j'ai √©t√© imm√©diatement captiv√© par ce formidable outil. Un univers entier de possibilit√©s s'est d√©voil√© √† moi. J'ai tout de suite vu cette innovation comme un outil √† grand potentiel de productivit√© et donc lucratif.

Tr√®s vite, j'ai cherch√© √† utiliser cet outil de la meilleure des mani√®res possibles pour augmenter largement ma productivit√© en automatisant des t√¢ches tout en gardant un travail de la m√™me qualit√©. Par la m√™me occasion, j'ai d√©couvert le "prompt engineering", un mot compliqu√© qui signifie simplement le fait d'optimiser les instructions fournies √† Chat GPT pour obtenir des r√©ponses de la meilleure qualit√© possible.

√Ä partir de ce moment, j'eus une id√©e dont je fis part √† mon fid√®le associ√© et ami, Tahirou Laouan Magagi. Pourquoi ne pas utiliser la puissance de GPT pour automatiser le processus de cr√©ation de sites internet dans le but de les vendre par la suite ?

Ce √† quoi Tahirou a surench√©ri en proposant une id√©e encore plus innovante. Au lieu de se placer en tant que simple vendeur, pourquoi ne pas viser plus loin et devenir le vendeur des vendeurs? Pourquoi ne pas vendre la pioche plut√¥t que l'or ?

Au d√©but, cela me paraissait compl√®tement irr√©alisable, bien trop ambitieux pour de simples √©tudiants dans la vingtaine, d√©couvrant √† peine la vie adulte et le milieu de l'entrepreneuriat. Mais, aimant le risque et l'aventure, j'ai accept√© son id√©e et je l'ai suivi dans cette folle aventure entrepreneuriale.

Apr√®s des mois de d√©vouement, jonglant entre nos cours, nos jobs en alternance et notre projet, nous sommes fiers d'annoncer la naissance de [justclickbuild.com](https://justclickbuild.com) : le premier g√©n√©rateur de sites web 100% aliment√© par IA et no-code ! üöÄ

### OFFRE DE LANCEMENT

Pour c√©l√©brer ce lancement, recevez 25‚Ç¨ de cr√©dit. G√©n√©rez et personnalisez votre site avec notre outil no-code. Essayez sur [justclickbuild.com](https://justclickbuild.com) et laissez vous surprendre par la magie de l'IA. üéâ

Envie d'en savoir plus, d'√©changer avec notre √©quipe, ou de partager vos retours? üëâ Rejoignez-nous d√®s maintenant sur notre serveur [Discord](https://discord.gg/8hbSFXSTHu)


		"""
	image_url = "../../static/img/jcb_banner.png"

	post1 = Post(
		title=title,
		content=body,
		date_posted="2024-01-27 11:09:49",
		image_url=image_url
	)

	title = "Logarithmes Naturels d√©mystifi√©s"

	body = """
Lorsqu'on parle de croissance exponentielle, il est commun de penser √† quelque chose qui grandit tr√®s rapidement. Cependant, la croissance exponentielle d√©signe un type sp√©cifique de croissance, distincte de la croissance polynomiale, telle que celle d√©crite par les fonctions \(x^2\), \(x^3\), ou \(x^{300}\). Ces derni√®res, bien qu'acc√©l√©rant rapidement, ne se comparent pas √† la vitesse de la croissance exponentielle, qui est proportionnelle √† la taille de la population ou du montant en question.¬†

## Le Principe de la Croissance Exponentielle
La croissance exponentielle s'observe dans de nombreux ph√©nom√®nes naturels et financiers, tels que la reproduction des lapins ou l'accumulation des int√©r√™ts sur un montant d'argent. Cette croissance n'est pas seulement rapide, mais sa vitesse augmente proportionnellement √† sa grandeur actuelle.

## Int√©r√™t Compos√© et le Nombre \( e \)
Prenons un exemple avec un compte bancaire offrant un int√©r√™t annuel de 100 %. Si vous d√©posez un dollar, ce montant deviendra deux dollars en un an. Cependant, les int√©r√™ts ne sont pas seulement calcul√©s √† la fin de l'ann√©e. En r√©alit√©, ils sont souvent calcul√©s plus fr√©quemment, ce qui acc√©l√®re la croissance de votre argent.

## Exp√©rimentation avec le Taux de Composition
Supposons que l'int√©r√™t soit calcul√© deux fois par an, chaque semestre. Dans ce cas, votre dollar initial deviendra 2.25 dollars √† la fin de l'ann√©e. Si l'int√©r√™t est calcul√© chaque mois, le montant atteint sera environ 2.61 dollars. Ce montant continue d'augmenter avec la fr√©quence de calcul de l'int√©r√™t, approchant une limite √† mesure que la fr√©quence de calcul devient infiniment grande.

## D√©couverte du Nombre \( e \)
Lorsque l'int√©r√™t est calcul√© en continu, c'est-√†-dire √† une fr√©quence infinie, le montant final converge vers une valeur sp√©cifique, environ 2.71828, connue sous le nom de \( e \), le nombre d'Euler. Ce nombre est fondamental en math√©matiques et en sciences, car il d√©crit des taux de croissance ou de d√©croissance proportionnels √† la grandeur actuelle d'un syst√®me.

## Signification du Nombre \( e \)
Le nombre \( e \) appara√Æt naturellement dans de nombreux contextes, y compris la croissance des populations, la d√©composition radioactive, et le refroidissement des objets. Il repr√©sente un taux de croissance ou de d√©croissance proportionnel √† la taille actuelle de l'entit√© observ√©e.

## Conclusion
Le nombre \( e \) n'est pas simplement un nombre arbitraire; il √©merge naturellement de la structure du monde autour de nous, illustrant des principes de croissance et de d√©croissance proportionnels. Que ce soit en finance, en biologie, ou en physique, \( e \) joue un r√¥le crucial dans notre compr√©hension des ph√©nom√®nes naturels et artificiels.

			"""
	image_url = "../../static/img/blog_posts/log_nat.png"

	post2 = Post(
		title=title,
		content=body,
		date_posted="2024-04-20 13:12:13",
		image_url=image_url
	)

	title = "Understanding the Vocabulary of Object-Oriented Programming (OOP)"

	body = """
Object-Oriented Programming (OOP) is a programming paradigm based on the concept of "objects," which can contain data, in the form of fields (often known as attributes or properties), and code, in the form of procedures (often known as methods). OOP languages are diverse, but they all support the fundamental features that leverage the following key terms and concepts. Understanding these terms is crucial for anyone learning or working with OOP languages like Java, C++, Python, or others.

## 1. Class
A **class** is a blueprint for creating objects. It defines a datatype by bundling data (attributes) and methods that work on the data into a single unit. For instance, a class `Car` might include attributes like `color` and `model`, and methods like `drive()` and `brake()`.

```python
class Car:
    def __init__(self, model, color):
        self.model = model
        self.color = color

    def drive(self):
        return "This car is driving."
```

## 2. Object
An **object** is an instance of a class. When a class is defined, no memory is allocated until an object is created from the class. Each object has a separate identity and a set of attributes which are defined by the class.

```python
my_car = Car(model="Toyota Camry", color="Blue")
```

## 3. Method
A **method** is a function defined in a class that describes the behaviors of an object. It is where the logic of a class is defined. A method might manipulate the internal state of an object or perform actions related to the object's attributes.

```python
def drive(self):
    return "This car is driving."
```

## 4. Property (Attribute)
**Properties** hold the state of the object, with each object created from a class having its own set of data. Properties are data elements used within a class.

```python
self.model = model
self.color = color
```

## 5. Inheritance
**Inheritance** is a way to form new classes using classes that have already been defined. The new class, known as a derived class, inherits attributes and methods from the existing class, called the base class. This feature promotes code reusability and relationship establishment between objects.

```python
class ElectricCar(Car):
    def __init__(self, model, color, battery_size):
        super().__init__(model, color)
        self.battery_size = battery_size
```

## 6. Encapsulation
**Encapsulation** is the concept of wrapping the data (attributes) and the code acted on the data (methods) together as a single unit. In encapsulation, the data is not accessed directly; it is accessed through the methods present in the class. This helps protect the integrity of the data.

```python
class Car:
    def __init__(self, model, color):
        self.model = model
        self.color = color

    def get_color(self):
        return self.color

    def set_color(self, color):
        self.color = color
```

## 7. Polymorphism
**Polymorphism** allows methods to do different things based on the object it is acting upon. With polymorphism, a single interface can represent different underlying forms (data types).

```python
def drive(self):
    return "This car is driving quietly." if isinstance(self, ElectricCar) else "This car is driving."
```

## 8. Abstraction
**Abstraction** allows making complex systems simpler by setting aside unnecessary details to focus on features that are crucial for understanding and using the system.

```python
from abc import ABC, abstractmethod

class Vehicle(ABC):
    @abstractmethod
    def drive(self):
        pass
```

## 9. Constructor
A **constructor** is a special method called when an object is instantiated. It usually initializes the various properties of the object.

```python
def __init__(self, model, color):
    self.model = model
    self.color = color
```

## 10. Destructor
**Destructor** is a method that is called when an object is destroyed. Its main purpose is resource deallocation and other cleanup necessary for the object being destroyed.

```python
def __del__(self):
    print("Car object is being deleted.")
```

## 11. Interface
An **interface** in Python can be implemented using abstract base classes that define methods that must be created in any subclass.

```python
class Vehicle(ABC):
    @abstractmethod
    def drive(self):
        pass
```

## 12. Abstract Class
An **abstract class** cannot be instantiated and is used as

 a base class. It can contain both abstract methods and regular methods.

```python
class Vehicle(ABC):
    @abstractmethod
    def drive(self):
        pass
```

## 13. Composition and Aggregation
**Composition** involves creating classes that contain objects of other classes; **aggregation** uses references to other objects.

```python

class Engine:
    def start(self):
        return "Engine is starting."

class Car:
    def __init__(self, model, color):
        self.model = model
        self.color = color
        self.engine = Engine()  # Composition

    def start_engine(self):
        return self.engine.start()
```

By mastering these foundational concepts, you‚Äôll be well-prepared to dive into object-oriented programming and effectively design applications using its principles. Whether you are a beginner or looking to refresh your knowledge, these concepts form the backbone of any robust OOP-based application.
				"""
	image_url = "../../static/img/blog_posts/oop_vocabulary.png"

	post3 = Post(
		title=title,
		content=body,
		date_posted="2024-04-21",
		image_url=image_url
	)

	# Add the post to the session
	db.session.add(post1)
	db.session.add(post2)
	db.session.add(post3)

	# db.session.query(Project).delete()
	# Commit the changes
	db.session.commit()
